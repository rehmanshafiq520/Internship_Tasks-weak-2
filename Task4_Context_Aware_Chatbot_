{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d266b030-233b-4e9d-8e68-350768a7cb29",
   "metadata": {},
   "outputs": [],
   "source": [
    "# from langchain_community.document_loaders import DirectoryLoader\n",
    "# from langchain_text_splitters import RecursiveCharacterTextSplitter\n",
    "# from langchain_community.vectorstores import FAISS\n",
    "# from langchain_community.embeddings import HuggingFaceEmbeddings\n",
    "# from langchain_community.llms import LlamaCpp\n",
    "# from langchain.chains import RetrievalQA\n",
    "#\n",
    "# loader=DirectoryLoader(\"dataset for chatbot\",glob=\"*.txt\")\n",
    "# documents=loader.load()\n",
    "# print(f\"Total documents loaded: {len(documents)}\")\n",
    "# text_splitter=RecursiveCharacterTextSplitter(chunk_size=500,chunk_overlap=50)\n",
    "# chunks=text_splitter.split_documents(documents)\n",
    "# print(f\"Total text chunks: {len(chunks)}\")\n",
    "#\n",
    "# embedding_model = HuggingFaceEmbeddings(model_name=\"all-MiniLM-L6-v2\")\n",
    "#\n",
    "# vectorstore = FAISS.from_documents(chunks, embedding_model)\n",
    "# vectorstore.save_local(\"faiss_index\")\n",
    "# retriever = vectorstore.as_retriever()\n",
    "# print(\"Vector store created\")\n",
    "#\n",
    "# llm=LlamaCpp(\n",
    "#     model_path=\"model llm/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf\",\n",
    "#     n_ctx=2048,\n",
    "#     n_threads=4,\n",
    "#     temperature=0.5,\n",
    "#     max_tokens=256,\n",
    "#     verbose=True\n",
    "# )\n",
    "# qa_chain=RetrievalQA.from_chain_type(\n",
    "#     llm=llm,\n",
    "#     retriever=retriever,\n",
    "#     return_source_documents=True\n",
    "# )\n",
    "# print(\"RetrievalQA chain created successfully!\")\n",
    "# #EXAMPLE\n",
    "# query = \"What is techniques of AI ?\"\n",
    "# result = qa_chain.invoke({\"query\": query})\n",
    "# print(\"\\nðŸ“¢ Answer:\")\n",
    "# print(result[\"result\"])\n",
    "#if you want to see how every thing work use above code else below for streamlit app\n",
    "from langchain_community.document_loaders import DirectoryLoader\n",
    "from langchain_text_splitters import RecursiveCharacterTextSplitter\n",
    "from langchain_community.vectorstores import FAISS\n",
    "from langchain_community.embeddings import HuggingFaceEmbeddings\n",
    "from langchain_community.llms import LlamaCpp\n",
    "from langchain.chains import ConversationalRetrievalChain\n",
    "\n",
    "def load_chat_chain():\n",
    "    embedding_model = HuggingFaceEmbeddings(model_name=\"all-MiniLM-L6-v2\")\n",
    "\n",
    "    try:\n",
    "        vectorstore = FAISS.load_local(\"faiss_index\", embedding_model)\n",
    "    except:\n",
    "        loader = DirectoryLoader(\"dataset for chatbot\", glob=\"*.txt\")\n",
    "        documents = loader.load()\n",
    "        text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)\n",
    "        chunks = text_splitter.split_documents(documents)\n",
    "        vectorstore = FAISS.from_documents(chunks, embedding_model)\n",
    "        vectorstore.save_local(\"faiss_index\")\n",
    "\n",
    "    retriever = vectorstore.as_retriever()\n",
    "\n",
    "    llm = LlamaCpp(\n",
    "        model_path=\"model llm/tinyllama-1.1b-chat-v1.0.Q4_K_M.gguf\",\n",
    "        n_ctx=2048,\n",
    "        n_threads=4,\n",
    "        temperature=0.5,\n",
    "        max_tokens=256,\n",
    "        verbose=False\n",
    "    )\n",
    "\n",
    "    qa_chain = ConversationalRetrievalChain.from_llm(\n",
    "        llm=llm,\n",
    "        retriever=retriever,\n",
    "        return_source_documents=True,\n",
    "        verbose=False\n",
    "    )\n",
    "    return qa_chain"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
